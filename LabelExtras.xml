<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.02</doclet-version-NOT-library-version>
    <class>
        <name>uk.co.martinpearman.b4a.text.method.LinkMovementMethod</name>
        <shortname>LinkMovementMethod</shortname>
        <owner>process</owner>
        <method>
            <name>GetInstance</name>
            <comment></comment>
            <returntype>android.text.method.MovementMethod</returntype>
        </method>
    </class>
    <class>
        <name>uk.co.martinpearman.b4a.objects.labelextras.LabelExtras</name>
        <shortname>LabelExtras</shortname>
        <owner>process</owner>
        <method>
            <name>SetMovementMethod</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>Label1</name>
                <type>android.widget.TextView</type>
            </parameter>
            <parameter>
                <name>MovementMethod1</name>
                <type>android.text.method.MovementMethod</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>uk.co.martinpearman.b4a.text.style.URLSpan</name>
        <shortname>URLSpan_TEST</shortname>
        <objectwrapper>android.text.style.URLSpan</objectwrapper>
        <owner>process</owner>
        <method>
            <name>GetURL</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
    </class>
    <class>
        <name>uk.co.martinpearman.b4a.text.style.UnderlineSpan</name>
        <shortname>UnderlineSpan</shortname>
        <objectwrapper>android.text.style.UnderlineSpan</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
    </class>
    <class>
        <name>uk.co.martinpearman.b4a.text.style.TextAppearanceSpan</name>
        <shortname>TextAppearanceSpan_TEST</shortname>
        <objectwrapper>android.text.style.TextAppearanceSpan</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>TextSize</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TextStyle</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Family</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>LinkTextColor</name>
            <returntype>android.content.res.ColorStateList</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TextColor</name>
            <returntype>android.content.res.ColorStateList</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>uk.co.martinpearman.b4a.text.style.StyleSpan</name>
        <shortname>StyleSpan</shortname>
        <objectwrapper>android.text.style.StyleSpan</objectwrapper>
        <owner>process</owner>
        <method>
            <name>GetStyle</name>
            <comment></comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
    </class>
    <class>
        <name>uk.co.martinpearman.b4a.text.style.ClickableSpan</name>
        <shortname>ClickableSpan</shortname>
        <objectwrapper>uk.co.martinpearman.b4a.text.style.ClickableSpanImpl</objectwrapper>
        <owner>process</owner>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>mBA</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>UnderlineText</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
    </class>
    <class>
        <name>uk.co.martinpearman.b4a.text.Spanned</name>
        <shortname>Spanned</shortname>
        <owner>process</owner>
        <field>
            <name>SPAN_INCLUSIVE_INCLUSIVE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SPAN_INCLUSIVE_EXCLUSIVE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SPAN_EXCLUSIVE_EXCLUSIVE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SPAN_EXCLUSIVE_INCLUSIVE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>uk.co.martinpearman.b4a.text.SpannableStringBuilder</name>
        <shortname>SpannableStringBuilder</shortname>
        <objectwrapper>android.text.SpannableStringBuilder</objectwrapper>
        <owner>process</owner>
        <method>
            <name>Clear</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>GetSpanFlags</name>
            <comment></comment>
            <returntype>int</returntype>
            <parameter>
                <name>Span1</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>NextURLSpanTransition</name>
            <comment></comment>
            <returntype>int</returntype>
            <parameter>
                <name>Start</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SetSpan</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>Span1</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>Start</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>End</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Flags</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>NextStyleSpanTransition</name>
            <comment></comment>
            <returntype>int</returntype>
            <parameter>
                <name>Start</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Delete</name>
            <comment></comment>
            <returntype>uk.co.martinpearman.b4a.text.SpannableStringBuilder</returntype>
            <parameter>
                <name>Start</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>End</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>ClearSpans</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>CharSequence1</name>
                <type>java.lang.CharSequence</type>
            </parameter>
        </method>
        <method>
            <name>Append2</name>
            <comment></comment>
            <returntype>uk.co.martinpearman.b4a.text.SpannableStringBuilder</returntype>
            <parameter>
                <name>Text</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>Start</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>End</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Append3</name>
            <comment></comment>
            <returntype>uk.co.martinpearman.b4a.text.SpannableStringBuilder</returntype>
            <parameter>
                <name>Char1</name>
                <type>char</type>
            </parameter>
        </method>
        <method>
            <name>Replace2</name>
            <comment></comment>
            <returntype>uk.co.martinpearman.b4a.text.SpannableStringBuilder</returntype>
            <parameter>
                <name>Start</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>End</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>CharSequence1</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>CharSequence1Start</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>CharSequence1End</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Append</name>
            <comment></comment>
            <returntype>uk.co.martinpearman.b4a.text.SpannableStringBuilder</returntype>
            <parameter>
                <name>Text</name>
                <type>java.lang.CharSequence</type>
            </parameter>
        </method>
        <method>
            <name>GetUnderlineSpans</name>
            <comment></comment>
            <returntype>uk.co.martinpearman.b4a.text.style.UnderlineSpan[]</returntype>
            <parameter>
                <name>QueryStart</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>QueryEnd</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>NextUnderlineSpanTransition</name>
            <comment></comment>
            <returntype>int</returntype>
            <parameter>
                <name>Start</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Replace</name>
            <comment></comment>
            <returntype>uk.co.martinpearman.b4a.text.SpannableStringBuilder</returntype>
            <parameter>
                <name>Start</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>End</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>CharSequence1</name>
                <type>java.lang.CharSequence</type>
            </parameter>
        </method>
        <method>
            <name>GetStyleSpans</name>
            <comment></comment>
            <returntype>uk.co.martinpearman.b4a.text.style.StyleSpan[]</returntype>
            <parameter>
                <name>QueryStart</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>QueryEnd</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetSpanEnd</name>
            <comment></comment>
            <returntype>int</returntype>
            <parameter>
                <name>Span1</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>CharAt</name>
            <comment></comment>
            <returntype>char</returntype>
            <parameter>
                <name>Where</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetURLSpans</name>
            <comment></comment>
            <returntype>uk.co.martinpearman.b4a.text.style.URLSpan[]</returntype>
            <parameter>
                <name>QueryStart</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>QueryEnd</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetChars</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>Start</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>End</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Dest</name>
                <type>char[]</type>
            </parameter>
            <parameter>
                <name>DestOffset</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>RemoveSpan</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>Span1</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>GetSpanStart</name>
            <comment></comment>
            <returntype>int</returntype>
            <parameter>
                <name>Span1</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <property>
            <name>Length</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>uk.co.martinpearman.b4a.text.HTML</name>
        <shortname>Html</shortname>
        <owner>process</owner>
        <method>
            <name>FromHtml2</name>
            <comment>Returns a displayable styled text from the provided HTML string.
Any &amp;lt;img&amp;gt; tags in the HTML will call the specified ImageGetter sub to request a representation of the image (a drawable or null for a generic replacement image) and the specified TagHandler sub to handle unknown tags.
The drawable returned by the ImageGetter sub has to be sized with setBounds.</comment>
            <returntype>java.lang.CharSequence</returntype>
            <parameter>
                <name>pBA</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>HtmlString</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>ImageGetterEventPrefix</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>TagHandlerEventPrefix</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setBounds</name>
            <comment>Specifies a bounding rectangle for the drawable.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>drawable</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
            <parameter>
                <name>left</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>top</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>right</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>bottom</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>ToHtml</name>
            <comment>Returns an HTML representation of the provided character sequence.</comment>
            <returntype>java.lang.CharSequence</returntype>
            <parameter>
                <name>CharSequence1</name>
                <type>java.lang.CharSequence</type>
            </parameter>
        </method>
        <method>
            <name>FromHtml</name>
            <comment>Returns a displayable styled text from the provided HTML string.</comment>
            <returntype>java.lang.CharSequence</returntype>
            <parameter>
                <name>HtmlString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
    </class>
    <version>1.1</version>
    <comment></comment>
    <author>Martin Pearman</author>
</root>
